#include <iostream>

using namespace std;

// В этой задаче нужно найти максимальное возможное расстояние между соседними коровами,
// для этого можно использовать бинарный поиск по ответу.
// Изначально ответ может быть от 1 до расстояния между двумя крайними стойлами.
// Мы находим середину интервала, и проверяем для неё, возможно ли расставить коров таким образом.
// В зависимости от полученного результата изменяем интервал.

int countForAnswer(int answer, int firstElem, int n, int coordinates[]) { // проверяем, возможен ли такой ответ (возможно ли расставить коров с интервалом не меньше middle)
    int current = firstElem; // координата последней выставленной коровы
    int numberOfCows = 1; // число расставленных коров
    for (int i = 0; i < n; i++) {
        int x = coordinates[i];
        if ((x - current) > answer) { // проверяем, если поставить новую корову в следующее стойло, не будет ли интервал меньше ответа
            numberOfCows += 1; // + одна поставленная корова
            current = x; // меняем координату последней коровы
        }
    }
    return numberOfCows; // сколько коров удалось поставить
}

int main() {
    int n, k;
    scanf("%d%d", &n, &k);
    int coordinates[n];
    for(int i = 0; i < n; i++) {
        scanf("%d", &coordinates[i]); // записываем в массив координат
    }
    int l = 0; // минимальный ответ - 0
    int r = coordinates[n - 1] - coordinates[0] + 1; // максимальный ответ - расстояние между первым и последним стойлом
    while (l + 1 < r) { // пока границы не сошлись
        int middle = (l + r) / 2; // ищем середину, и проверяем, может ли она быть ответом
        int numberOfCows = countForAnswer(middle, coordinates[0], n, coordinates); // проверяем, сколько коров при таком значении можно поставить
        if (k > numberOfCows) { // если меньше необходимого количества, берём меньшую половину интервала и повторяем
            r = middle;
        } else { // если больше или равно, тогда берём большую половину интервала, также повторяем
            l = middle;
        }
    }
    printf("%d", r);
    return 0;
}
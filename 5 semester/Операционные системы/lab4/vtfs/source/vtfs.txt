#include <linux/init.h>

#include <linux/module.h>

#include <linux/fs.h>

#include <linux/printk.h>

#include <linux/dcache.h>

#include <linux/errno.h>

#define MODULE_NAME "vtfs"

MODULE_LICENSE("GPL");
MODULE_AUTHOR("secs-dev");
MODULE_DESCRIPTION("A simple FS kernel module");

#define LOG(fmt, ...) pr_info("["
  MODULE_NAME "]: "
  fmt, # #VA_ARGS)

// Прототипы функций
int vtfs_fill_super(struct super_block * sb, void data, int silent);

struct inode vtfs_get_inode(struct super_block * sb,
  const struct inode * dir, umode_t mode, int i_ino);

struct dentry * vtfs_mount(struct file_system_type * fs_type, int flags,
  const char * token, void * data);

void vtfs_kill_sb(struct super_block * sb);

// Объявление структуры файловой системы
struct file_system_type vtfs_fs_type = {
  .name = "vtfs", // Название файловой системы
  .mount = vtfs_mount, // Функция монтирования
  .kill_sb = vtfs_kill_sb, // Функция для уничтожения superblock
};



// Инициализация модуля
static int init vtfs_init(void) {
  int ret;
  // Регистрация файловой системы
  ret = register_filesystem( & vtfs_fs_type);
  if (ret) {
    LOG("Failed to register filesystem\n");
    return ret;
  }
  LOG("VTFS joined the kernel\n");
  return 0;
}

static void exit vtfs_exit(void) {
  LOG("VTFS left the kernel\n");
  unregister_filesystem( & vtfs_fs_type); // Отменяем регистрацию при выгрузке модуля
}

module_init(vtfs_init);
module_exit(vtfs_exit);

struct dentry * vtfs_mount(
  struct file_system_type * fs_type,
  int flags,
  const char * token,
    void * data
) {
  struct dentry * ret = mount_nodev(fs_type, flags, data, vtfs_fill_super);
  if (IS_ERR(ret)) {
    printk(KERN_ERR "Can't mount file system: %ld\n", PTR_ERR(ret));
  } else {
    printk(KERN_INFO "Mounted successfully\n");
  }
  return ret;
}

int vtfs_fill_super(struct super_block * sb, void data, int silent) {
  struct inode inode = vtfs_get_inode(sb, NULL, S_IFDIR, 1000);
  sb -> s_root = d_make_root(inode);
  if (sb -> s_root == NULL) {
    return -ENOMEM;
  }
  printk(KERN_INFO "Filesystem superblock created\n");
  return 0;
}

struct inode * vtfs_get_inode(struct super_block * sb,
  const struct inode * dir, umode_t mode, int i_ino) {
  struct inode * inode = new_inode(sb);
  if (!inode) {
    return NULL;
  }
  inode -> i_ino = i_ino;
  inode -> i_sb = sb;
  inode -> i_mode = mode;
  inode_init_owner(NULL, inode, dir, mode); // Передаем NULL вместо &init_user_ns
  inode -> i_op = & simple_dir_inode_operations;
  inode -> i_fop = & simple_dir_operations;
  return inode;
}

void vtfs_kill_sb(struct super_block * sb) {
  printk(KERN_INFO "vtfs super block is destroyed. Unmount successful.\n");
}